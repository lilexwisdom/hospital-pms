# Task ID: 5
# Title: 환자 설문 시스템 구현 (토큰 생성, 4단계 폼, 자동 환자 생성)
# Status: done
# Dependencies: 4
# Priority: high
# Description: 24시간 유효 설문 토큰 생성, 모바일 최적화 4단계 설문 폼, 설문 응답 처리 및 환자 레코드 자동 생성 트랜잭션
# Details:
1. 설문 토큰 생성 API:
   ```typescript
   // app/api/survey/token/route.ts
   export async function POST(request: Request) {
     const token = crypto.randomUUID();
     const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);
     
     await supabase.from('survey_tokens').insert({
       token,
       created_by: userId,
       expires_at: expiresAt
     });
     
     return Response.json({ 
       url: `${process.env.NEXT_PUBLIC_URL}/survey/${token}` 
     });
   }
   ```
2. 4단계 설문 폼 구현 (react-hook-form + zod):
   - Step 1: 개인정보 동의 (체크박스 필수)
   - Step 2: 기본정보 (이름, 전화번호, 주민번호 마스킹 입력, Daum 주소 API)
   - Step 3: 건강정보 (8개 질환 체크박스, 기본값 "해당사항 없음")
   - Step 4: 희망검사 선택
3. 진행률 표시 및 자동 저장 기능
4. 설문 제출 트랜잭션:
   ```typescript
   const { data, error } = await supabase.rpc('submit_survey', {
     survey_data: formData,
     token: surveyToken
   });
   ```
5. 주민번호 암호화 처리 (AES-256)
6. 실시간 BD 알림 트리거

# Test Strategy:
1. 토큰 생성 및 만료 테스트
2. 각 단계별 유효성 검증 테스트
3. 주소 API 연동 테스트
4. 트랜잭션 롤백 테스트
5. 모바일 디바이스 테스트

# Subtasks:
## 1. 설문 토큰 생성 API 및 만료 로직 구현 [done]
### Dependencies: None
### Description: 24시간 유효 토큰 생성 API 개발, 토큰 검증 미들웨어 구현, 만료된 토큰 자동 정리 스케줄러 설정
### Details:
1. POST /api/survey/token 엔드포인트 구현
2. crypto.randomUUID()로 고유 토큰 생성
3. survey_tokens 테이블에 토큰 정보 저장 (created_by, expires_at)
4. 토큰 유효성 검증 미들웨어 작성
5. Vercel Cron Job으로 만료 토큰 일일 정리
6. 토큰 생성 시 QR코드 생성 옵션 추가

## 2. 4단계 설문 폼 UI 구현 (react-hook-form, zod) [done]
### Dependencies: 5.1
### Description: 모바일 최적화 4단계 설문 폼 UI 구현, 각 단계별 유효성 검증 스키마 정의, 진행률 표시 및 이전/다음 네비게이션
### Details:
1. react-hook-form으로 4단계 폼 구조 설계
2. zod 스키마로 각 단계별 검증 규칙 정의
3. 단계별 컴포넌트: 기본정보, 연락처, 주소정보, 추가정보
4. 모바일 터치 최적화 UI (큰 버튼, 적절한 여백)
5. 진행률 표시 바 및 단계 인디케이터
6. 폼 데이터 임시 저장 (localStorage)
<info added on 2025-07-18T23:34:34.105Z>
구현 완료 사항:
- SurveyFormMain 컴포넌트: 자동 저장 기능 포함한 메인 설문 폼 컴포넌트
- 4단계 컴포넌트 구현:
  * Step1PersonalInfo: 주민번호 마스킹 처리된 개인정보 입력
  * Step2ContactInfo: 주소 API 연동 준비된 연락처 정보
  * Step3MedicalHistory: 조건부 필드가 포함된 의료 기록
  * Step4Confirmation: 동의서가 포함된 최종 확인
- submitSurvey 서버 액션: 기본 환자 레코드 생성 기능
- 설문 완료 페이지 구현
- 한국어 에러 메시지와 함께 모든 폼 검증 작동
- localStorage를 통한 폼 데이터 자동 저장
- 주소 API 연동(Task 5.3) 및 주민번호 암호화(Task 5.4) 준비 완료
</info added on 2025-07-18T23:34:34.105Z>

## 3. 주소 API 연동 및 주민번호 마스킹 입력 [done]
### Dependencies: 5.2
### Description: 다음 우편번호 API 연동으로 주소 검색 구현, 주민번호 입력 필드 마스킹 처리 및 유효성 검증
### Details:
1. 다음 우편번호 서비스 API 연동
2. 주소 검색 모달/팝업 구현
3. 주민번호 입력 컴포넌트 개발 (******-*******)
4. 주민번호 패턴 검증 (생년월일, 성별 체크)
5. react-input-mask로 입력 포맷팅
6. 주민번호 유효성 검증 알고리즘 구현
<info added on 2025-07-19T01:22:22.874Z>
완료된 구현 사항:
1. AddressSearchModal 컴포넌트 생성 - 다음 우편번호 API를 동적으로 로드
2. SSNInput 컴포넌트 구현 - react-input-mask를 사용한 포맷팅 및 마스킹 처리 (******-******* 표시, 토글로 노출 가능)
3. 체크섬 알고리즘을 포함한 포괄적인 주민번호 유효성 검증 구현
4. Step1PersonalInfo를 새로운 주민번호 컴포넌트 사용하도록 업데이트
5. Step2ContactInfo에 주소 검색 모달 통합
6. zod refinements를 사용하여 survey 스키마에 적절한 주민번호 검증 추가
모든 컴포넌트는 적절한 오류 처리와 사용자 피드백으로 완전히 기능하도록 구현됨
</info added on 2025-07-19T01:22:22.874Z>

## 4. 주민번호 암호화 및 보안 처리 [done]
### Dependencies: 5.3
### Description: 주민번호 서버측 암호화 구현, 복호화 권한 관리, 암호화 키 로테이션 정책 수립
### Details:
1. Node.js crypto 모듈로 AES-256-GCM 암호화
2. 환경변수에 암호화 키 저장 (KEY_ROTATION_DAYS=90)
3. 주민번호 암호화/복호화 유틸리티 함수
4. 복호화 권한 체크 미들웨어 (admin, manager만)
5. 암호화된 데이터 DB 저장 (encrypted_ssn 컬럼)
6. 감사 로그: 복호화 시도 기록
<info added on 2025-07-19T01:31:26.493Z>
완료된 종합 주민번호 암호화 구현:
1) Node.js 서버측 암호화 유틸리티 - AES-256-GCM 알고리즘 구현
2) 주민번호 암호화/복호화/해싱/마스킹 함수 구현
3) admin/manager 역할만 복호화 가능한 역할 기반 미들웨어 구축
4) 속도 제한이 적용된 보안 주민번호 조회 API 엔드포인트 개발
5) 모든 주민번호 접근 시도에 대한 종합 감사 로깅 추가
6) 설문 제출시 데이터베이스 암호화 함수 사용하도록 업데이트
7) 감사 로그 테이블 및 통계 뷰를 위한 데이터베이스 마이그레이션 생성
8) 암호화 키를 위한 환경 변수 설정 추가
시스템은 이제 데이터베이스 레벨 암호화, 서버측 검증, 역할 기반 접근 제어, 완전한 감사 추적을 통한 다층 보안을 제공합니다.
</info added on 2025-07-19T01:31:26.493Z>

## 5. 설문 제출 트랜잭션 및 환자 레코드 생성 [done]
### Dependencies: 5.4
### Description: 설문 제출 시 트랜잭션으로 환자 레코드 자동 생성, 중복 체크, 롤백 처리 구현
### Details:
1. POST /api/survey/submit 트랜잭션 처리
2. 주민번호 기반 환자 중복 체크
3. 트랜잭션: survey_responses + patients 테이블
4. 에러 시 자동 롤백 처리
5. 설문 완료 페이지 및 감사 메시지
6. 토큰 사용 완료 처리 (재사용 방지)
<info added on 2025-07-19T01:40:02.664Z>
구현 완료:
- submit_survey_with_patient 데이터베이스 함수: 전체 트랜잭션을 원자적으로 처리
- SSN 해시를 사용한 중복 환자 체크로 중복 레코드 방지
- 구체적인 에러 코드와 실패 시 롤백을 포함한 에러 처리
- 환자 상태에 따른 동적 콘텐츠가 포함된 향상된 설문 완료 페이지
- 모든 설문 제출에 대한 감사 로깅 구현
- 적절한 에러 매핑과 함께 트랜잭션 함수를 사용하도록 설문 액션 업데이트
- 중복 환자 체크를 위한 API 엔드포인트 추가
- 참조 번호와 다음 단계가 포함된 완료 페이지 향상
시스템은 이제 실패 시 자동 롤백으로 데이터 일관성을 보장하고 중복 환자 레코드를 방지함
</info added on 2025-07-19T01:40:02.664Z>

## 6. 실시간 BD 알림 및 진행률 자동 저장 [done]
### Dependencies: 5.5
### Description: BD 담당자 실시간 설문 응답 알림, 설문 진행률 자동 저장 및 복구 기능 구현
### Details:
1. Supabase Realtime으로 설문 제출 알림
2. BD 대시보드에 실시간 알림 토스트
3. 각 단계 완료 시 진행률 자동 저장
4. 브라우저 새로고침 시 진행 상태 복구
5. 설문 미완료 시 리마인더 이메일/SMS
6. BD별 설문 응답률 통계 위젯
<info added on 2025-07-19T01:47:20.238Z>
구현 완료 내역:
1. useRealtimeNotifications 훅 생성 - Supabase Realtime 채널로 신규 설문 및 진행률 업데이트 실시간 수신
2. RealtimeNotificationProvider로 BD 대시보드 전역 알림 컨텍스트 제공
3. SurveyResponseStats 위젯 구현 - 실시간 응답률, 완료율, 추세 차트 표시
4. useSurveyProgress 훅으로 설문 진행 상태 자동 저장 기능 구현
5. localStorage 및 데이터베이스 백업을 통한 브라우저 새로고침 시 진행 상태 복구
6. 이메일/SMS 리마인더 시스템 구축 - 미완료 설문 자동 알림 발송
7. 매일 오전 10시 실행되는 리마인더 처리 cron job 설정
8. realtime_notifications, survey_reminders 테이블 및 트리거 마이그레이션 완료

시스템은 이제 BD 사용자에게 설문 제출 시 즉시 알림을 전달하고, 실시간으로 응답률을 추적하며, 설문 진행 상태를 자동으로 저장 및 복구합니다.
</info added on 2025-07-19T01:47:20.238Z>

