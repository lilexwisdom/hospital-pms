# Task ID: 6
# Title: 환자 관리 시스템 구현 (CRUD, 상태 관리, 의료정보)
# Status: pending
# Dependencies: 5
# Priority: high
# Description: 환자 목록 조회, 상세 정보 페이지, 상태 워크플로우, 의료정보 등록 및 질환 플래그 자동 매핑
# Details:
1. 환자 목록 페이지:
   - TanStack Table 기반 데이터 테이블
   - 서버 사이드 페이지네이션
   - 다중 필터 (상태, 담당자, 기간)
   - 빠른 검색 기능
2. 환자 상세 페이지 (탭 구조):
   ```typescript
   // app/patients/[id]/page.tsx
   const tabs = [
     { id: 'overview', label: '개요', component: PatientOverview },
     { id: 'medical', label: '의료정보', component: MedicalInfo },
     { id: 'consultations', label: '상담이력', component: ConsultationHistory },
     { id: 'appointments', label: '예약정보', component: AppointmentInfo }
   ];
   ```
3. 상태 관리 워크플로우:
   - 상태 전환 규칙 정의
   - 상태 변경 시 감사 로그
   - 역할별 상태 변경 권한
4. 의료정보 폼:
   - 과거력/가족력 텍스트 입력
   - 복약정보 동적 추가/삭제
   - 수술이력 날짜 포함
   - 알러지 정보 태그 입력
5. 질환 플래그 자동 매핑:
   ```typescript
   const diseaseKeywords = {
     diabetes: ['당뇨', '혈당', 'DM'],
     hypertension: ['고혈압', '혈압', 'HTN'],
     // ...
   };
   ```

# Test Strategy:
1. 대용량 데이터 페이지네이션 성능 테스트
2. 상태 전환 비즈니스 로직 테스트
3. 의료정보 저장 및 조회 테스트
4. 질환 키워드 매칭 정확도 테스트
5. 동시 편집 충돌 방지 테스트

# Subtasks:
## 1. 환자 목록 페이지 구현 (TanStack Table 기반) [done]
### Dependencies: None
### Description: TanStack Table을 활용한 환자 목록 테이블 구현, 서버 사이드 페이지네이션, 다중 필터링(상태/담당자/기간), 빠른 검색 기능 구현
### Details:
1. TanStack Table v8 설정 및 커스텀 훅 구현
2. Supabase 페이지네이션 쿼리 작성 (LIMIT/OFFSET)
3. 필터 컴포넌트 구현 (상태 드롭다운, 담당자 선택, 날짜 범위)
4. 디바운싱된 검색 입력 필드 구현
5. 정렬 기능 및 컬럼 가시성 토글 구현
6. 로딩 상태 및 스켈레톤 UI 추가

## 2. 환자 상세 페이지 탭 구조 구현 [done]
### Dependencies: 6.1
### Description: 환자 상세 정보를 위한 탭 기반 레이아웃 구현, 개요/의료정보/상담이력/예약정보 탭 컴포넌트 개발
### Details:
1. app/patients/[id]/page.tsx 라우트 생성
2. 탭 네비게이션 컴포넌트 구현 (URL 쿼리 파라미터 연동)
3. PatientOverview 컴포넌트 (기본 정보, 상태, 담당자)
4. ConsultationHistory 컴포넌트 (상담 이력 타임라인)
5. AppointmentInfo 컴포넌트 (예약 캘린더 뷰)
6. 탭 전환 시 데이터 프리페칭 구현

## 3. 상태 관리 워크플로우 및 역할별 권한 구현 [done]
### Dependencies: 6.2
### Description: 환자 상태 전환 비즈니스 로직 구현, 역할별 액션 권한 제어, 상태 변경 이력 추적
### Details:
1. 상태 전환 규칙 정의 (State Machine 패턴)
2. Zustand 스토어로 상태 관리 로직 구현
3. 역할별 권한 체크 HOC/훅 구현
4. 상태 변경 API 엔드포인트 구현
5. 상태 변경 시 알림 및 담당자 자동 할당
6. 상태 이력 테이블 및 UI 구현

## 4. 의료정보 폼 구현 (동적 필드, 질환 플래그 자동 매핑) [pending]
### Dependencies: 6.2
### Description: React Hook Form 기반 의료정보 입력 폼, 동적 필드 추가/삭제, 질환 키워드 자동 감지 및 플래그 매핑
### Details:
1. React Hook Form + Zod 스키마 검증 설정
2. 동적 필드 배열 관리 (useFieldArray)
3. 검사 항목 마스터 데이터 연동
4. 질환 키워드 매칭 알고리즘 구현
5. 자동 완성 및 추천 기능 구현
6. 파일 업로드 (검사 결과지) 기능 추가

## 5. 감사 로그 및 동시 편집 방지 기능 구현 [pending]
### Dependencies: 6.3, 6.4
### Description: 모든 CRUD 작업에 대한 감사 로그 기록, 낙관적 잠금을 통한 동시 편집 충돌 방지, 변경 이력 뷰어 구현
### Details:
1. PostgreSQL 트리거로 감사 로그 자동 기록
2. 낙관적 잠금 구현 (version 컬럼 활용)
3. 동시 편집 감지 및 충돌 해결 UI
4. 감사 로그 조회 페이지 구현
5. 변경 사항 diff 뷰어 구현
6. 복원 기능 구현 (이전 버전으로 롤백)

