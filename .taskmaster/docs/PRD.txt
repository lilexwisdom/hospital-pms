# 프로젝트 개요
NextJS 14와 Supabase를 기반으로 한 현대적인 병원 환자 관리 시스템(PMS)을 구축합니다. 기존 Google Apps Script 기반 시스템을 완전히 대체하여 건강검진 등 잠재 환자를 대상으로 전문적인 마케팅 및 상담을 통해 실제 검사 예약으로 전환하고, 예약 이탈을 체계적으로 관리하여 병원 매출을 증대시키는 것이 목표입니다.

# 핵심 비즈니스 가치
본 시스템의 핵심은 "잠재 환자 → 실제 검사 완료"까지의 전환율을 극대화하는 것입니다. 설문을 통한 환자 유치부터 예약 확정까지의 전 과정을 디지털화하고 자동화하여 환자 이탈을 최소화하고 직원 업무 효율성을 극대화합니다.

# 핵심 사용자 페르소나

## 1. 대외협력이사 (BD - Business Development)
- 잠재 환자 발굴 및 설문 발송
- 설문 응답 실시간 모니터링 
- 신규 환자 상담 및 의료정보 수집
- CS팀 인계 결정
- 개인 실적 추적

## 2. 고객관리센터 직원 (CS - Customer Service)  
- BD 인계 환자 예약 조율
- 예약 생성/변경/취소 처리
- 환자 커뮤니케이션 및 리마인더
- No-show 관리
- 팀 성과 모니터링

## 3. 성과 관리자 (Manager)
- 전사 실시간 성과 대시보드 모니터링
- 팀별/개인별 KPI 추적
- 보고서 생성 및 분석
- 의사결정을 위한 데이터 분석

## 4. 시스템 관리자 (Admin)
- 사용자 계정 및 권한 관리
- 시스템 설정 및 마스터 데이터 관리
- 보안 및 감사 로그 모니터링
- 검사 항목 및 병원 정보 관리

# 핵심 환자 유치 워크플로우
1. **설문 발송**: BD가 잠재 환자에게 개인화된 24시간 유효 설문 URL 발송
2. **설문 응답**: 환자가 모바일 최적화된 4단계 설문 작성 (개인정보 동의 → 기본정보 → 건강정보 → 희망검사)
3. **자동 환자 생성**: 설문 제출과 동시에 환자 레코드 자동 생성, 건강정보 DB 매핑, 의료기록 저장
4. **실시간 알림**: 담당 BD에게 즉시 알림, 대시보드 실시간 업데이트
5. **BD 상담**: 설문 기반 전화 상담, 추가 의료정보 수집, 상담 기록
6. **CS 인계**: 상담 완료 후 CS팀 인계, 환자 상태 자동 변경
7. **예약 조율**: CS가 환자와 검사 일정 협의, 예약 시스템에서 가능 시간 확인
8. **예약 확정**: 예약 생성, 환자 상태 업데이트, 확인서 발송
9. **검사 완료**: 내원 확인, 최종 상태 업데이트

# 사용자 경험 (UX) 핵심 목표
- BD: 설문 응답을 30초 내 확인하고 즉시 상담 시작 가능
- CS: 인계받은 환자 정보를 한눈에 파악하고 효율적인 예약 조율
- 환자: 3-5분 내 간편한 모바일 설문 완료
- Manager: 실시간 대시보드로 전사 현황 즉시 파악
- Admin: 직관적인 사용자 및 시스템 관리

# 기술 아키텍처

## 프론트엔드 스택
- **NextJS 14.2+**: App Router, Server Components, Server Actions 활용
- **TypeScript 5.3+**: 엄격한 타입 안정성으로 대규모 시스템 안정성 확보
- **Tailwind CSS 3.4+**: 유틸리티 우선 CSS로 빠른 개발과 일관된 디자인 시스템
- **shadcn/ui**: Radix UI 기반 접근성과 품질이 보장된 재사용 컴포넌트
- **TanStack Query v5**: 효율적인 서버 상태 관리 및 실시간 캐싱
- **Zustand**: 가벼운 클라이언트 상태 관리
- **Framer Motion**: 부드러운 사용자 경험을 위한 애니메이션

## 백엔드 스택  
- **Supabase**: PostgreSQL 15+ 데이터베이스, Row Level Security, Realtime, Auth, Storage 통합 서비스
- **NextJS API Routes**: RESTful API 엔드포인트 및 Server Actions
- **Supabase Edge Functions**: Deno 런타임 기반 서버리스 비즈니스 로직

## 개발 및 배포
- **Vercel**: 자동 CI/CD, Edge Network, Preview deployments
- **Sentry**: 실시간 에러 트래킹 및 성능 모니터링  
- **Vercel Analytics**: NextJS 최적화 분석 도구

## 보안 및 규정 준수
- **AES-256 암호화**: 주민등록번호 및 민감정보 별도 암호화
- **Row Level Security**: 데이터베이스 레벨 접근 제어
- **RBAC**: 역할 기반 세밀한 권한 관리
- **개인정보보호법 준수**: GDPR/PIPA 요구사항 충족

# 개발 로드맵

## Phase 1: 기반 구축 (2주)
**목표**: 개발 환경 구성 및 핵심 인프라 구축

### Week 1: 프로젝트 설정 및 데이터베이스
- NextJS 14 프로젝트 생성 및 TypeScript 설정
- Supabase 프로젝트 생성 및 환경 구성
- PostgreSQL 데이터베이스 스키마 생성 (users, roles, patients, medical_records, consultations, appointments, survey_tokens, survey_responses, exam_types, audit_logs)
- Row Level Security 정책 구현
- 개발/스테이징/프로덕션 환경 분리

### Week 2: 인증 시스템 및 기본 UI
- Supabase Auth 기반 인증 시스템 구현
- 역할 기반 접근 제어 (Admin, Manager, BD, CS)
- shadcn/ui 컴포넌트 라이브러리 설정
- 기본 레이아웃 및 네비게이션 구조
- 로그인/로그아웃 페이지 구현
- 세션 관리 및 미들웨어 설정

## Phase 2: 핵심 기능 개발 (3주)
**목표**: 환자 설문 시스템 및 관리 워크플로우 구현

### Week 3: 환자 설문 시스템
- 설문 토큰 생성 및 관리 시스템
- 4단계 모바일 최적화 설문 폼 구현
  - Step 1: 개인정보 동의 (PIPA 준수 동의서)
  - Step 2: 기본정보 (이름, 연락처, 주민번호 마스킹, Daum 주소 API 연동)
  - Step 3: 건강정보 (8가지 질환 체크박스, 기본값 "해당사항 없음", 추가 의료정보 입력)
  - Step 4: 희망검사 (심장검사, 위/대장내시경, CT, MRI + 기타)
- 설문 응답 유효성 검증 및 보안 처리
- 설문 제출 → 환자 레코드 자동 생성 트랜잭션
- 건강정보 체크박스 → DB 질환 플래그 자동 매핑
- 실시간 알림 시스템 (Supabase Realtime)

### Week 4: 환자 관리 시스템
- 환자 목록 조회 및 검색 기능 (역할별 접근 제어)
- 환자 상세 정보 페이지 (탭 구조: 개요, 의료정보, 상담이력, 예약정보)
- 환자 상태 관리 (신규접수 → CS팀인계 → 예약조율중 → 예약확정 → 검사완료)
- 의료정보 등록 및 관리 (과거력, 가족력, 복약정보, 수술이력, 알러지)
- 질환 플래그 자동 업데이트 (키워드 기반)
- 상담 기록 작성 및 이력 관리

### Week 5: 예약 관리 및 실시간 기능
- 예약 생성/변경/취소 시스템
- 예약 가능 시간 확인 및 충돌 검사
- 캘린더 뷰 및 리스트 뷰 예약 현황
- 예약 변경 이력 추적
- 실시간 대시보드 (환자 유입, 예약 현황, 개인/팀/전사 통계)
- BD 전용: 최근 설문 응답 실시간 위젯
- CS 전용: 인계 환자 및 예약 관리 위젯

## Phase 3: 고급 기능 및 최적화 (2주)
**목표**: 사용자 경험 개선 및 시스템 최적화

### Week 6: 검색, 필터링 및 보고서
- 고급 환자 검색 및 다중 필터 (상태, 질환, 기간, 담당자)
- 페이지네이션 및 무한 스크롤 최적화
- Excel/PDF 보고서 생성 및 내보내기
- 정기 보고서 자동 생성 (일간, 주간, 월간)
- 사용자 관리 시스템 (계정 생성, 역할 변경, 활성화/비활성화)
- 시스템 설정 관리 (검사 항목, 병원 정보, 공휴일)

### Week 7: 성능 최적화 및 보안 강화
- 데이터베이스 쿼리 최적화 및 인덱싱
- 프론트엔드 코드 분할 및 지연 로딩
- 이미지 최적화 및 CDN 설정
- API Rate Limiting 및 요청 제한
- 감사 로그 시스템 구현
- 민감정보 접근 로깅
- 보안 헤더 설정 및 XSS/CSRF 방지
- 성능 모니터링 대시보드

## Phase 4: 테스트 및 배포 (1주)
**목표**: 품질 보증 및 안정적인 프로덕션 배포

### Week 8: 종합 테스트 및 배포
- 단위 테스트 및 통합 테스트 (Jest, React Testing Library)
- E2E 테스트 (Playwright)
- 접근성 테스트 및 개선
- 모바일 반응형 테스트 (iPhone, Android)
- 성능 테스트 (Lighthouse, Core Web Vitals)
- 보안 취약점 스캔
- 사용자 교육 및 매뉴얼 작성
- 프로덕션 배포 및 모니터링 설정
- 핫픽스 대응 체계 구축

# 논리적 의존성 체인

## 1. 기반 인프라 (최우선)
데이터베이스 스키마 → 인증 시스템 → 기본 UI 프레임워크
**이유**: 모든 후속 기능이 이 기반 위에 구축되므로 가장 먼저 완료되어야 함

## 2. 설문 시스템 (핵심 기능)  
설문 토큰 생성 → 설문 폼 → 응답 처리 → 환자 자동 생성
**이유**: 환자 데이터의 주요 유입 경로이므로 환자 관리보다 먼저 구현

## 3. 환자 관리 시스템
환자 기본 CRUD → 상태 관리 → 의료정보 관리 → 상담 기록
**이유**: 설문으로 생성된 환자 데이터를 관리하기 위해 필요

## 4. 예약 관리 시스템  
예약 생성 → 예약 변경/취소 → 예약 현황 대시보드
**이유**: 환자 상태가 "예약조율중"으로 진행된 후 필요한 기능

## 5. 실시간 기능
알림 시스템 → 대시보드 → 통계 및 보고서
**이유**: 기본 데이터 플로우가 완성된 후 실시간 모니터링 기능 추가

## 6. 고급 기능 및 최적화
검색/필터 → 보고서 → 사용자 관리 → 성능 최적화
**이유**: 핵심 비즈니스 로직 완성 후 사용자 경험 개선

## 7. 품질 보증 및 배포
테스트 → 보안 강화 → 배포 → 모니터링
**이유**: 모든 기능 완성 후 최종 품질 검증 및 안정적 배포

# 중요한 기술적 고려사항

## 설문 관련 보안 요구사항
- **주민번호 뒷자리 비노출**: 사용자 화면에서 마스킹 처리 (`●●●●●●●`)
- **주민번호 검증**: 체크섬 알고리즘으로 유효성 검사, 향후 본인 인증 연동 고려
- **Daum Postcode API 연동**: 우편번호 + 도로명주소 + 상세주소 구조
- **Step 3 기본값**: "위에 해당하는 사항 없음" 기본 선택
- **Step 4 간소화**: 심장검사, 위/대장내시경, CT, MRI + 기타 입력

## 실시간 데이터 동기화
- Supabase Realtime을 활용한 환자 상태 변경 즉시 반영
- 설문 제출 → 환자 생성 → BD 알림까지 30초 이내 처리
- 대시보드 위젯 자동 갱신 (10초 간격)

## 성능 목표
- 페이지 로딩: 3초 이내
- API 응답: 2초 이내  
- 동시 사용자: 200명 지원
- 환자 검색: 10만 건 기준 1초 이내

## 모바일 최적화
- 설문 폼 모바일 퍼스트 디자인
- 터치 친화적 인터페이스 (최소 44px 버튼)
- PWA 기능 (홈 화면 추가, 오프라인 기본 동작)

# 위험 요소 및 대응 방안

## 기술적 위험
**위험**: Supabase 서비스 의존도로 인한 벤더 락인
**대응**: PostgreSQL 표준 SQL 사용, 마이그레이션 가능한 구조 설계

**위험**: 실시간 기능 성능 이슈
**대응**: 적절한 채널 구독 관리, 필요시 Redis 캐싱 레이어 추가

**위험**: 주민번호 등 민감정보 보안 취약점
**대응**: AES-256 암호화, 별도 암호화 키 관리, 정기 보안 감사

## 비즈니스 위험
**위험**: 설문 응답률 저조
**대응**: UX 최적화, 진행률 표시, 자동 저장 기능으로 이탈 방지

**위험**: 사용자 권한 관리 복잡성
**대응**: 명확한 RBAC 정의, 역할별 테스트 시나리오 구축

**위험**: 데이터 마이그레이션 실패
**대응**: 단계적 마이그레이션, 충분한 테스트 기간, 롤백 계획 수립

## 운영 위험  
**위험**: 갑작스런 트래픽 증가
**대응**: Vercel 자동 스케일링, Supabase 확장 계획 수립

**위험**: 핵심 기능 장애
**대응**: 모니터링 시스템 구축, 장애 대응 매뉴얼 작성

**위험**: 개인정보보호법 위반
**대응**: 법무 검토, 개인정보 처리 방침 수립, 정기 규정 준수 점검

# 성공 지표 (KPI)

## 개발 성과 지표
- 모든 핵심 기능 8주 내 구현 완료
- 코드 커버리지 80% 이상
- Core Web Vitals 모든 지표 Good 등급
- 보안 취약점 0건

## 비즈니스 성과 지표  
- 설문 완료율 70% 이상
- 설문 → 상담 전환율 85% 이상
- 상담 → 예약 전환율 60% 이상
- 예약 No-show율 15% 이하
- 사용자 만족도 4.5/5.0 이상

## 시스템 성능 지표
- 99.9% 가용성
- 평균 응답 시간 1초 이내
- 동시 접속자 200명 안정적 지원
- 데이터 정합성 100% 유지

이 PRD를 기반으로 Taskmaster가 체계적이고 효율적인 개발 태스크를 생성하여 성공적인 병원 환자 관리 시스템을 구축할 수 있을 것입니다.
